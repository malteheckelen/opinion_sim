install.packages("spaDES")
install.packages("SpaDES")
library(raster)
raster(nrows = 100, ncols = 100, xmn = -50, xmx = 50, ymn = -50, ymx = 50)
plot(raster(nrows = 100, ncols = 100, xmn = -50, xmx = 50, ymn = -50, ymx = 50))
help(SpaDES.core)
?"spades-package"
??"spades-package"
library(SpaDES)
library(SpaDES.core)
install.packages("SpaDES")
install.packages("SpaDES", dependencies=TRUE)
install.packages("SpaDES", dependencies=TRUE)
library(SpaDES.core)
help("SpaDES.core")
sum(c(TRUE, FALSE, FALSE, TRUE))
text <- make_lattice(length=20, dim=2)
library(igraph)
text <- make_lattice(length=20, dim=2)
names(test)
names(text)
text
get.adjacency(text)
library(SpaDES)
# pick a directory to download modules and data to
workDirectory <- file.path(dirname(tempdir()), "Lcc2005")
moduleDir <- file.path(workDirectory, "modules")
checkPath(moduleDir, create = TRUE)
downloadModule("LCC2005", moduleDir) # default `data=FALSE` doesn't download data
# setup simulation
outputDir <- file.path(workDirectory, "simOutputs")
cacheDir <- checkPath(file.path(outputDir, "cache"), create = TRUE)
times <- list(start = 2005.0, end = 2020.0, timeunit = "year")
parameters <- list(
.globals = list(burnStats = "fireStats"),
fireSpreadLcc = list(drought = 1.2), # in
caribouMovementLcc = list(N = 1e3, startTime = times$start + 1,
glmInitialTime = NA_real_)
)
modules <- list("LCC2005")
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = moduleDir,
outputPath = outputDir
)
# This next step will download data if they do not yet exist locally
mySim <- simInit(times = times, params = parameters, modules = modules,
paths = paths)
install.packages("rgeos")
# This next step will download data if they do not yet exist locally
mySim <- simInit(times = times, params = parameters, modules = modules,
paths = paths)
# This next step will download data if they do not yet exist locally
mySim <- simInit(times = times, params = parameters, modules = modules,
paths = paths)
### Simulation overview: note the child modules are initialized
moduleDiagram(mySim)
demo("spades-simulation", package = "SpaDES.core")
library(SpaDES.core)
demo("spades-simulation", package = "SpaDES.core")
