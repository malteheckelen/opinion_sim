outputPath = "../data/outputs")
modules <- list("basic_setup", "lattice", "hegselmann_krause", "data_collection")
times <- list(start = 0.0, end = 1000)
parameters <- list(
basic_setup = list(
no_agents = 100
),
lattice = list(
directed = FALSE
),
hegselmann_krause = list(
epsilon = 0.1
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out
str(out)
out$data_collect
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$agent_characteristics
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect
library(ggplot2)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point() +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(alpha=0.05) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, colour=opinions) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, colour=as.factor(out$opinions)) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, aes(colour=as.factor(out$opinions))) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, aes(colour=factor(out$opinions))) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, aes(colour=factor(out$data_collect$opinions))) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, aes(colour=out$data_collect$opinions)) +
theme_bw()
geom_point(size= 0.01, alpha=0.05, aes(colour=blue) +
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, aes(colour=blue)) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, aes(colour="blue")) +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, colour="blue") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, colour="lightblue") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, colour="darkslategrey") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.05, colour="darkslategray4") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, colour="darkslategray4") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.1, colour="darkslategray4") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.1, colour="dodgerblue2") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.1, colour="dodgerblue4") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.1, colour="dodgerblue3") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.08, colour="dodgerblue3") +
theme_bw()
setwd('~/GitHub/R_MaDisBe/simulation')
## decide where you're working
mainDir <- '~/GitHub/R_MaDisBe/simulation' # SET YOUR MAIN DIRECTORY HERE.
setPaths(cachePath = "cache",
modulePath = "modules",
inputPath = "../data/inputs",
outputPath = "../data/outputs")
modules <- list("basic_setup", "complete_graph", "hegselmann_krause", "data_collection")
times <- list(start = 0, end = 500)
parameters <- list(
basic_setup = list(
no_agents = 100
),
complete_graph = list(
directed = FALSE
),
hegselmann_krause = list(
epsilon = 0.1
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
parameters <- list(
basic_setup = list(
no_agents = 100
),
#complete_graph = list(
#  directed = FALSE
#),
hegselmann_krause = list(
epsilon = 0.1
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.08, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
#complete_graph = list(
#  directed = FALSE
#),
hegselmann_krause = list(
epsilon = 0.2
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.08, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
#complete_graph = list(
#  directed = FALSE
#),
hegselmann_krause = list(
epsilon = 0.01
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.08, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
#complete_graph = list(
#  directed = FALSE
#),
hegselmann_krause = list(
epsilon = 0.05
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.08, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
#complete_graph = list(
#  directed = FALSE
#),
hegselmann_krause = list(
epsilon = 0.03
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.08, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
#complete_graph = list(
#  directed = FALSE
#),
hegselmann_krause = list(
epsilon = 0.06
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.08, colour="dodgerblue3") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.09, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
#complete_graph = list(
#  directed = FALSE
#),
hegselmann_krause = list(
epsilon = 0.3
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.09, colour="dodgerblue3") +
theme_bw()
library(igraph)
barabasi.game(100,power=.5,m=2) %>% tidy()
library(dplyr)
library(tidygraph)
barabasi.game(100,power=.5,m=2) %>% tidy()
library(tidyverse)
barabasi.game(100,power=.5,m=2) %>% tidy()
play_smallworld(2, 100)
play_smallworld(2, 100, 5)
play_smallworld(2, 100, 5, 0.3)
play_smallworld(1, 100, 5, 0.3)
play_smallworld(1, 100, 5, 0.3) %>% plot()
setwd('~/GitHub/R_MaDisBe/simulation')
## decide where you're working
mainDir <- '~/GitHub/R_MaDisBe/simulation' # SET YOUR MAIN DIRECTORY HERE.
setPaths(cachePath = "cache",
modulePath = "modules",
inputPath = "../data/inputs",
outputPath = "../data/outputs")
modules <- list("basic_setup", "small_world", "hegselmann_krause", "data_collection")
times <- list(start = 0, end = 500)
parameters <- list(
basic_setup = list(
no_agents = 100
),
small_world = list(
dim = 1,
rewire_p = 0.5
),
hegselmann_krause = list(
epsilon = 0.3
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.09, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
small_world = list(
dim = 1,
rewire_p = 0.5
),
hegselmann_krause = list(
epsilon = 0.1
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.09, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
small_world = list(
dim = 1,
rewire_p = 0.5
),
hegselmann_krause = list(
epsilon = 0.2
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.09, colour="dodgerblue3") +
theme_bw()
parameters <- list(
basic_setup = list(
no_agents = 100
),
small_world = list(
dim = 1,
rewire_p = 0.5
),
hegselmann_krause = list(
epsilon = 0.15
)
)
paths <- getPaths()
SIM <- simInit(times = times, params = parameters, modules = modules, paths = paths)
out <- spades(SIM)
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.09, colour="dodgerblue3") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.1, colour="dodgerblue3") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.01, alpha=0.2, colour="dodgerblue3") +
theme_bw()
out$data_collect %>%
ggplot(aes(time, opinions)) +
geom_point(size= 0.02, alpha=0.2, colour="dodgerblue3") +
theme_bw()
abs(0.13 - 0.27)
abs(0.13 - 0.27) / 2
ifelse(0.13 < 0.27, 0.13 + abs(0.13 - 0.27) / 2, 0.13 - abs(0.13 - 0.27) / 2)
matrix(100)
matrix(seq(1,100,1), 2)
matrix(seq(1,100,1), dim = c(2,2))
matrix(seq(1,100,1), 10, 10)
matrix(seq(1,100,1), 10, 10) %>% tidy()
matrix(seq(1,100,1), 10, 10) %>% as_tibble()
matrix(seq(1,100,1), 10, 10) %>% as_tibble() %>% gather()
test <- matrix(seq(1,100,1), 10, 10)
colnames(test) <- seq(1, 100, 1)
colnames(test)
test
colnames(test) <- seq(1, 10, 1)
test %>% as_tibble() %>% gather()
rownames(test)
rownames(test) <- seq(1,10,1)
test %>% as_tibble() %>% mutate(sender = row.names()) %>% mutate(receiver = colnames()) %>% gather()
test %>% as_tibble() %>% mutate(sender = row.names(test)) %>% mutate(receiver = colnames(test)) %>% gather()
test %>% as_tibble() %>% mutate(sender = row.names(test)) %>% mutate(receiver = colnames(test)) %>% gather(1:100)
test %>% as_tibble() %>% mutate(sender = row.names(test)) %>% mutate(receiver = colnames(test))
test %>% as_tibble() %>% mutate(sender = row.names(test)) %>% gather(receiver, message, "1":"10")
test %>% as_tibble() %>% mutate(sender = row.names(test)) %>% gather(receiver, message, "1":"10") %>% View()
test %>% as_tibble() %>% mutate(sender = row.names(test)) %>% gather(receiver, message, "1":"10") %>% View()
message_matrix <- matrix(rep(1, no_agents^2), 2)
no_agents <- 100
message_matrix <- matrix(rep(1, no_agents^2), 2)
message_matrix
dim(message_matrix)
message_matrix <- matrix(rep(1, no_agents^2), no_agents, no_agents)
message_matrix
environment <- create_lattice(c(10, 10))
no_agents <- 100
agent_characteristics <- tibble(
agent_id = seq(1, no_agents, 1),
opinion = runif(no_agents, 0, 1)
)
agent_characteristics
produce_altered_message <- function(opinion_send, opinion_receive) {
altered_message <- ifelse(opinion_send < opinion_receive,
opinion_send + abs(opinion_send - opinion_receive) / 2,
opinion_send - abs(opinion_send - opinion_receive) / 2)
return(altered_message)
}
message_matrix <- outer(agent_characteristics$opinion, agent_characteristics$opinion, produce_altered_message)
View(message_matrix)
agent_characteristics
produce_altered_message(agent_characteristics$opinion[1], agent_characteristics[2])
agent_characteristics$opinion[1]
produce_altered_message(agent_characteristics$opinion[1], agent_characteristics$opinion[2])
colnames(message_matrix) <- seq(1, no_agents, 1)
message_tibble <- message_matrix %>%
as_tibble() %>%
mutate(sender = row.names(test)) %>%
gather(receiver, message, "1":"10") %>%
mutate(receiver = as.numeric(receiver))
message_tibble <- message_matrix %>%
as_tibble() %>%
mutate(sender = row.names(message_matrix)) %>%
gather(receiver, message, "1":"10") %>%
mutate(receiver = as.numeric(receiver))
row.names(message_matrix) <- seq(1, no_agents, 1)
message_tibble <- message_matrix %>%
as_tibble() %>%
mutate(sender = row.names(message_matrix)) %>%
gather(receiver, message, "1":"10") %>%
mutate(receiver = as.numeric(receiver))
message_tibble
message_matrix %>%
as_tibble()
message_matrix %>%
as_tibble() %>%
mutate(sender = row.names(message_matrix))
message_matrix %>%
as_tibble() %>%
mutate(sender = row.names(message_matrix)) %>%
gather(receiver, message, "1":"10")
no_agents <- 10
agent_characteristics <- tibble(
agent_id = seq(1, no_agents, 1),
opinion = runif(no_agents, 0, 1)
)
produce_altered_message <- function(opinion_send, opinion_receive) {
altered_message <- ifelse(opinion_send < opinion_receive,
opinion_send + abs(opinion_send - opinion_receive) / 2,
opinion_send - abs(opinion_send - opinion_receive) / 2)
return(altered_message)
}
message_matrix <- outer(agent_characteristics$opinion, agent_characteristics$opinion, produce_altered_message)
row.names(message_matrix) <- seq(1, no_agents, 1)
colnames(message_matrix) <- seq(1, no_agents, 1)
message_tibble <- message_matrix %>%
as_tibble() %>%
mutate(sender = row.names(message_matrix)) %>%
gather(receiver, message, "1":"10") %>%
mutate(receiver = as.numeric(receiver))
message_tibble
message_tibble <- message_matrix %>%
as_tibble() %>%
mutate(sender = row.names(message_matrix)) %>%
gather(receiver, message, "1":"10")
message_tibble
produce_altered_message <- function(opinion_send, opinion_receive) {
altered_message <- ifelse(opinion_send < opinion_receive,
opinion_send + abs(opinion_send - opinion_receive) / 2,
opinion_send - abs(opinion_send - opinion_receive) / 2)
altered_message <- ifelse(abs(opinion_send - altered_message) > epsilon,
ifelse((opinion_send - altered_message) <= 0, 0, opinion_send - altered_message),
altered_message)
return(altered_message)
} # works
message_matrix <- outer(agent_characteristics$opinion, agent_characteristics$opinion, produce_altered_message) # works
epsilon <- 0.1
message_matrix <- outer(agent_characteristics$opinion, agent_characteristics$opinion, produce_altered_message) # works
row.names(message_matrix) <- seq(1, no_agents, 1)
colnames(message_matrix) <- seq(1, no_agents, 1)
message_tibble <- message_matrix %>%
as_tibble() %>%
mutate(sender = row.names(message_matrix)) %>%
gather(receiver, message, "1":"10") # works
message_tibble
filter(message_tibble, message==0)
strategies_overall <- tibble(
strategies = c("Receive", "Send", "Both", "Nothing"),
score = c(0, 0, 0, 0)
)
strategies_send <- tibble(
strategies = c("Unoptimized", "Optimized"),
score = c(0, 0)
)
